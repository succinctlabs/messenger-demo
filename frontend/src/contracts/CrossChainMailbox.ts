/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CrossChainMailboxInterface extends utils.Interface {
  functions: {
    "handleTelepathy(uint32,address,bytes)": FunctionFragment;
    "messages(uint256)": FunctionFragment;
    "messagesLength()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "handleTelepathy" | "messages" | "messagesLength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "handleTelepathy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "messagesLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "handleTelepathy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messagesLength",
    data: BytesLike
  ): Result;

  events: {
    "MessageReceived(uint32,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
}

export interface MessageReceivedEventObject {
  sourceChain: number;
  sender: string;
  message: string;
}
export type MessageReceivedEvent = TypedEvent<
  [number, string, string],
  MessageReceivedEventObject
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export interface CrossChainMailbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossChainMailboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    handleTelepathy(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _senderAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    messagesLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  handleTelepathy(
    _sourceChainId: PromiseOrValue<BigNumberish>,
    _senderAddress: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  messagesLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    handleTelepathy(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _senderAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    messagesLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MessageReceived(uint32,address,string)"(
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      message?: null
    ): MessageReceivedEventFilter;
    MessageReceived(
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      message?: null
    ): MessageReceivedEventFilter;
  };

  estimateGas: {
    handleTelepathy(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _senderAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messagesLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    handleTelepathy(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _senderAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messagesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
