/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CrossChainMailerInterface extends utils.Interface {
  functions: {
    "sendMessage(address,uint32,string)": FunctionFragment;
    "telepathy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "sendMessage" | "telepathy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "telepathy", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "telepathy", data: BytesLike): Result;

  events: {
    "MessageSent(address,uint96,address,uint32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
}

export interface MessageSentEventObject {
  mailbox: string;
  nonce: BigNumber;
  sender: string;
  targetChain: number;
  message: string;
}
export type MessageSentEvent = TypedEvent<
  [string, BigNumber, string, number, string],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface CrossChainMailer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossChainMailerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sendMessage(
      _mailbox: PromiseOrValue<string>,
      _targetChain: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    telepathy(overrides?: CallOverrides): Promise<[string]>;
  };

  sendMessage(
    _mailbox: PromiseOrValue<string>,
    _targetChain: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  telepathy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    sendMessage(
      _mailbox: PromiseOrValue<string>,
      _targetChain: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    telepathy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MessageSent(address,uint96,address,uint32,string)"(
      mailbox?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      targetChain?: null,
      message?: null
    ): MessageSentEventFilter;
    MessageSent(
      mailbox?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      targetChain?: null,
      message?: null
    ): MessageSentEventFilter;
  };

  estimateGas: {
    sendMessage(
      _mailbox: PromiseOrValue<string>,
      _targetChain: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    telepathy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    sendMessage(
      _mailbox: PromiseOrValue<string>,
      _targetChain: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    telepathy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
