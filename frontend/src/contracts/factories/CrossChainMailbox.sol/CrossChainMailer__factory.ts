/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CrossChainMailer,
  CrossChainMailerInterface,
} from "../../CrossChainMailbox.sol/CrossChainMailer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_TelepathyBroadcaster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "InsufficientFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ADDR_REVERSE_NODE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ETH_NODE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "reverseNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_recipientChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_recipientMailbox",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "sendMail",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "telepathyBroadcaster",
    outputs: [
      {
        internalType: "contract ITelepathyBroadcaster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516114ba3803806114ba83398101604081905261002f916100b2565b8161003933610062565b600155600280546001600160a01b0319166001600160a01b0392909216919091179055506100ef565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100c557600080fd5b825160208401519092506001600160a01b03811681146100e457600080fd5b809150509250929050565b6113bc806100fe6000396000f3fe6080604052600436106100a75760003560e01c80637cf8a2eb116100645780637cf8a2eb1461018e5780638da5cb5b146101c2578063cc473be3146101e0578063d294f0931461023f578063ddca3f4314610254578063f2fde38b1461026a57600080fd5b80631b2b8030146100ac57806349905b6d146100e95780635fd4b08a146100fe57806369fe0e2d1461012b578063715018a61461014b5780637315937d14610160575b600080fd5b3480156100b857600080fd5b506002546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc6100f7366004610f9f565b61028a565b005b34801561010a57600080fd5b5061011e61011936600461104d565b61035d565b6040516100e091906110ba565b34801561013757600080fd5b506100fc6101463660046110cd565b610618565b34801561015757600080fd5b506100fc610625565b34801561016c57600080fd5b5061018061017b36600461104d565b610639565b6040519081526020016100e0565b34801561019a57600080fd5b506101807f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e281565b3480156101ce57600080fd5b506000546001600160a01b03166100cc565b3480156101ec57600080fd5b5061018060408051600060208201527f4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0918101919091526060016040516020818303038152906040528051906020012081565b34801561024b57600080fd5b506100fc610694565b34801561026057600080fd5b5061018060015481565b34801561027657600080fd5b506100fc61028536600461104d565b6106d9565b6001543410156102bf5760015460405163a458261b60e01b815234600482015260248101919091526044015b60405180910390fd5b60006102de82336001600160a01b0316316102d93361035d565b61074f565b60025460405163147bce4960e01b81529192506001600160a01b03169063147bce4990610313908790879086906004016110e6565b6020604051808303816000875af1158015610332573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610356919061111f565b5050505050565b60606e0c2e074ec69a0dfb2997ba6c7d2e1e3b6103835761037d826109f5565b92915050565b600061038e83610639565b604051630178b8bf60e01b8152600481018290529091506000906e0c2e074ec69a0dfb2997ba6c7d2e1e90630178b8bf90602401602060405180830381865afa1580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611138565b90506001600160a01b038116158061042357506001600160a01b0381163b155b1561043957610431846109f5565b949350505050565b60405163691f343160e01b8152600481018390526001600160a01b0382169063691f343190602401600060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a69190810190611155565b925082516000036104ba57610431846109f5565b60006104c68482610a0b565b604051630178b8bf60e01b8152600481018290529091506000906e0c2e074ec69a0dfb2997ba6c7d2e1e90630178b8bf90602401602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190611138565b90506001600160a01b038116158061055b57506001600160a01b0381163b155b1561057357610569866109f5565b9695505050505050565b604051631d9dabef60e11b8152600481018390526000906001600160a01b03831690633b3b57de90602401602060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df9190611138565b9050866001600160a01b0316816001600160a01b031603610604575050505050919050565b61060d876109f5565b979650505050505050565b610620610a85565b600155565b61062d610a85565b6106376000610adf565b565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e261066583610b2f565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b61069c610a85565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156106d6573d6000803e3d6000fd5b50565b6106e1610a85565b6001600160a01b0381166107465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b6565b6106d681610adf565b60608381600085900361077a57506040805180820190915260018152600360fc1b60208201526108e6565b6040805160048082528183019092526000916020820181803683370190505090506107b56107b0670de0b6b3a7640000886111ef565b610b86565b6000815181106107c7576107c7611203565b602001015160f81c60f81b816000815181106107e5576107e5611203565b60200101906001600160f81b031916908160001a905350601760f91b8160018151811061081457610814611203565b60200101906001600160f81b031916908160001a9053506108406107b0670de0b6b3a764000088611219565b60008151811061085257610852611203565b602001015160f81c60f81b8160028151811061087057610870611203565b60200101906001600160f81b031916908160001a90535061089c6107b0670de0b6b3a764000088611219565b6001815181106108ae576108ae611203565b602001015160f81c60f81b816003815181106108cc576108cc611203565b60200101906001600160f81b031916908160001a90535090505b60608451600003610901576108fa336109f5565b9050610904565b50835b600083604051602001610917919061122d565b60408051601f198184030181529082905261093491602001611256565b6040516020818303038152906040529050600082604051602001610958919061127c565b60408051601f1981840301815290829052610975916020016112a6565b60408051601f19818403018152908290526109949186906020016112cc565b60408051601f19818403018152908290526109b1916020016112fb565b6040516020818303038152906040529050600082826040516020016109d79291906112cc565b60408051808303601f190181529190529a9950505050505050505050565b606061037d6001600160a01b0383166014610c19565b600081835111610a1d5750600061037d565b6000610a298484610dbc565b9050610a4984610a398386611324565b610a44906001611324565b610a0b565b610a54858584610e1f565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6000546001600160a01b031633146106375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006f181899199a1a9b1b9c1cb0b131b232b360811b60285b8015610b795760001901600f841682901a815360109093049260001901600f841682901a8153601084049350610b48565b5050602860002092915050565b60606000610b9383610e43565b600101905060008167ffffffffffffffff811115610bb357610bb3610f30565b6040519080825280601f01601f191660200182016040528015610bdd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610be757509392505050565b60606000610c28836002611337565b610c33906002611324565b67ffffffffffffffff811115610c4b57610c4b610f30565b6040519080825280601f01601f191660200182016040528015610c75576020820181803683370190505b509050600360fc1b81600081518110610c9057610c90611203565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610cbf57610cbf611203565b60200101906001600160f81b031916908160001a9053506000610ce3846002611337565b610cee906001611324565b90505b6001811115610d66576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610d2257610d22611203565b1a60f81b828281518110610d3857610d38611203565b60200101906001600160f81b031916908160001a90535060049490941c93610d5f81611356565b9050610cf1565b508315610db55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102b6565b9392505050565b6000805b8351610dcc8285611324565b14158015610e08575083610de08285611324565b81518110610df057610df0611203565b6020910101516001600160f81b031916601760f91b14155b15610db55780610e178161136d565b915050610dc0565b8251600090610e2e8385611324565b1115610e3957600080fd5b5091016020012090565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e825772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610eae576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610ecc57662386f26fc10000830492506010015b6305f5e1008310610ee4576305f5e100830492506008015b6127108310610ef857612710830492506004015b60648310610f0a576064830492506002015b600a831061037d5760010192915050565b6001600160a01b03811681146106d657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6f57610f6f610f30565b604052919050565b600067ffffffffffffffff821115610f9157610f91610f30565b50601f01601f191660200190565b600080600060608486031215610fb457600080fd5b833563ffffffff81168114610fc857600080fd5b92506020840135610fd881610f1b565b9150604084013567ffffffffffffffff811115610ff457600080fd5b8401601f8101861361100557600080fd5b803561101861101382610f77565b610f46565b81815287602083850101111561102d57600080fd5b816020840160208301376000602083830101528093505050509250925092565b60006020828403121561105f57600080fd5b8135610db581610f1b565b60005b8381101561108557818101518382015260200161106d565b50506000910152565b600081518084526110a681602086016020860161106a565b601f01601f19169290920160200192915050565b602081526000610db5602083018461108e565b6000602082840312156110df57600080fd5b5035919050565b63ffffffff841681526001600160a01b03831660208201526060604082018190526000906111169083018461108e565b95945050505050565b60006020828403121561113157600080fd5b5051919050565b60006020828403121561114a57600080fd5b8151610db581610f1b565b60006020828403121561116757600080fd5b815167ffffffffffffffff81111561117e57600080fd5b8201601f8101841361118f57600080fd5b805161119d61101382610f77565b8181528560208385010111156111b257600080fd5b61111682602083016020860161106a565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826111fe576111fe6111c3565b500490565b634e487b7160e01b600052603260045260246000fd5b600082611228576112286111c3565b500690565b602760f81b81526000825161124981600185016020870161106a565b9190910160010192915050565b6000825161126881846020870161106a565b61138560f11b920191825250600201919050565b61016960f51b81526000825161129981600285016020870161106a565b9190910160020192915050565b600082516112b881846020870161106a565b61040560f31b920191825250600201919050565b600083516112de81846020880161106a565b8351908301906112f281836020880161106a565b01949350505050565b6000825161130d81846020870161106a565b64204554482960d81b920191825250600501919050565b8082018082111561037d5761037d6111d9565b6000816000190483118215151615611351576113516111d9565b500290565b600081611365576113656111d9565b506000190190565b60006001820161137f5761137f6111d9565b506001019056fea2646970667358221220e8ad4ef2e0088a04d632d2130a9759a6d6c19109e146cef80ef86c067e58c3d064736f6c63430008100033";

type CrossChainMailerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrossChainMailerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CrossChainMailer__factory extends ContractFactory {
  constructor(...args: CrossChainMailerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _fee: PromiseOrValue<BigNumberish>,
    _TelepathyBroadcaster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CrossChainMailer> {
    return super.deploy(
      _fee,
      _TelepathyBroadcaster,
      overrides || {}
    ) as Promise<CrossChainMailer>;
  }
  override getDeployTransaction(
    _fee: PromiseOrValue<BigNumberish>,
    _TelepathyBroadcaster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _fee,
      _TelepathyBroadcaster,
      overrides || {}
    );
  }
  override attach(address: string): CrossChainMailer {
    return super.attach(address) as CrossChainMailer;
  }
  override connect(signer: Signer): CrossChainMailer__factory {
    return super.connect(signer) as CrossChainMailer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossChainMailerInterface {
    return new utils.Interface(_abi) as CrossChainMailerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainMailer {
    return new Contract(address, _abi, signerOrProvider) as CrossChainMailer;
  }
}
